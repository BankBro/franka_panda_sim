// Generated by gencpp from file franka_predict_action/PredictActionResponse.msg
// DO NOT EDIT!


#ifndef FRANKA_PREDICT_ACTION_MESSAGE_PREDICTACTIONRESPONSE_H
#define FRANKA_PREDICT_ACTION_MESSAGE_PREDICTACTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_predict_action
{
template <class ContainerAllocator>
struct PredictActionResponse_
{
  typedef PredictActionResponse_<ContainerAllocator> Type;

  PredictActionResponse_()
    : predict_ret(false)
    , action_flat()
    , action_shape()  {
    }
  PredictActionResponse_(const ContainerAllocator& _alloc)
    : predict_ret(false)
    , action_flat(_alloc)
    , action_shape(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _predict_ret_type;
  _predict_ret_type predict_ret;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _action_flat_type;
  _action_flat_type action_flat;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _action_shape_type;
  _action_shape_type action_shape;





  typedef boost::shared_ptr< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PredictActionResponse_

typedef ::franka_predict_action::PredictActionResponse_<std::allocator<void> > PredictActionResponse;

typedef boost::shared_ptr< ::franka_predict_action::PredictActionResponse > PredictActionResponsePtr;
typedef boost::shared_ptr< ::franka_predict_action::PredictActionResponse const> PredictActionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_predict_action::PredictActionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_predict_action::PredictActionResponse_<ContainerAllocator1> & lhs, const ::franka_predict_action::PredictActionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.predict_ret == rhs.predict_ret &&
    lhs.action_flat == rhs.action_flat &&
    lhs.action_shape == rhs.action_shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_predict_action::PredictActionResponse_<ContainerAllocator1> & lhs, const ::franka_predict_action::PredictActionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_predict_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "085ab47a05c5067de6e32066d85e1283";
  }

  static const char* value(const ::franka_predict_action::PredictActionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x085ab47a05c5067dULL;
  static const uint64_t static_value2 = 0xe6e32066d85e1283ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_predict_action/PredictActionResponse";
  }

  static const char* value(const ::franka_predict_action::PredictActionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool predict_ret         # result of prediction\n"
"float32[] action_flat     # the flatten predicted action\n"
"uint8[] action_shape      # the shape of the predicted action: [num_action, action_dim]\n"
;
  }

  static const char* value(const ::franka_predict_action::PredictActionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.predict_ret);
      stream.next(m.action_flat);
      stream.next(m.action_shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictActionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_predict_action::PredictActionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_predict_action::PredictActionResponse_<ContainerAllocator>& v)
  {
    s << indent << "predict_ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.predict_ret);
    s << indent << "action_flat[]" << std::endl;
    for (size_t i = 0; i < v.action_flat.size(); ++i)
    {
      s << indent << "  action_flat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.action_flat[i]);
    }
    s << indent << "action_shape[]" << std::endl;
    for (size_t i = 0; i < v.action_shape.size(); ++i)
    {
      s << indent << "  action_shape[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.action_shape[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PREDICT_ACTION_MESSAGE_PREDICTACTIONRESPONSE_H
