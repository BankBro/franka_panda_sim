// Generated by gencpp from file franka_predict_action/StoreNewActionToQueueResponse.msg
// DO NOT EDIT!


#ifndef FRANKA_PREDICT_ACTION_MESSAGE_STORENEWACTIONTOQUEUERESPONSE_H
#define FRANKA_PREDICT_ACTION_MESSAGE_STORENEWACTIONTOQUEUERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_predict_action
{
template <class ContainerAllocator>
struct StoreNewActionToQueueResponse_
{
  typedef StoreNewActionToQueueResponse_<ContainerAllocator> Type;

  StoreNewActionToQueueResponse_()
    : store_ret(false)  {
    }
  StoreNewActionToQueueResponse_(const ContainerAllocator& _alloc)
    : store_ret(false)  {
  (void)_alloc;
    }



   typedef uint8_t _store_ret_type;
  _store_ret_type store_ret;





  typedef boost::shared_ptr< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StoreNewActionToQueueResponse_

typedef ::franka_predict_action::StoreNewActionToQueueResponse_<std::allocator<void> > StoreNewActionToQueueResponse;

typedef boost::shared_ptr< ::franka_predict_action::StoreNewActionToQueueResponse > StoreNewActionToQueueResponsePtr;
typedef boost::shared_ptr< ::franka_predict_action::StoreNewActionToQueueResponse const> StoreNewActionToQueueResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator1> & lhs, const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator2> & rhs)
{
  return lhs.store_ret == rhs.store_ret;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator1> & lhs, const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_predict_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "199b9e329731aabfa20ffd0220024cf3";
  }

  static const char* value(const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x199b9e329731aabfULL;
  static const uint64_t static_value2 = 0xa20ffd0220024cf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_predict_action/StoreNewActionToQueueResponse";
  }

  static const char* value(const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool store_ret  # the result of storing the new action\n"
;
  }

  static const char* value(const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.store_ret);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StoreNewActionToQueueResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_predict_action::StoreNewActionToQueueResponse_<ContainerAllocator>& v)
  {
    s << indent << "store_ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.store_ret);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PREDICT_ACTION_MESSAGE_STORENEWACTIONTOQUEUERESPONSE_H
