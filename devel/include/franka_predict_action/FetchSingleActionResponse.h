// Generated by gencpp from file franka_predict_action/FetchSingleActionResponse.msg
// DO NOT EDIT!


#ifndef FRANKA_PREDICT_ACTION_MESSAGE_FETCHSINGLEACTIONRESPONSE_H
#define FRANKA_PREDICT_ACTION_MESSAGE_FETCHSINGLEACTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_predict_action
{
template <class ContainerAllocator>
struct FetchSingleActionResponse_
{
  typedef FetchSingleActionResponse_<ContainerAllocator> Type;

  FetchSingleActionResponse_()
    : fetch_ret(false)
    , action()
    , queue_size(0)  {
    }
  FetchSingleActionResponse_(const ContainerAllocator& _alloc)
    : fetch_ret(false)
    , action(_alloc)
    , queue_size(0)  {
  (void)_alloc;
    }



   typedef uint8_t _fetch_ret_type;
  _fetch_ret_type fetch_ret;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _action_type;
  _action_type action;

   typedef uint8_t _queue_size_type;
  _queue_size_type queue_size;





  typedef boost::shared_ptr< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FetchSingleActionResponse_

typedef ::franka_predict_action::FetchSingleActionResponse_<std::allocator<void> > FetchSingleActionResponse;

typedef boost::shared_ptr< ::franka_predict_action::FetchSingleActionResponse > FetchSingleActionResponsePtr;
typedef boost::shared_ptr< ::franka_predict_action::FetchSingleActionResponse const> FetchSingleActionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator1> & lhs, const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.fetch_ret == rhs.fetch_ret &&
    lhs.action == rhs.action &&
    lhs.queue_size == rhs.queue_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator1> & lhs, const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_predict_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d42957ee35d3ee4cc592b207953e1495";
  }

  static const char* value(const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd42957ee35d3ee4cULL;
  static const uint64_t static_value2 = 0xc592b207953e1495ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_predict_action/FetchSingleActionResponse";
  }

  static const char* value(const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool fetch_ret    # fetching result\n"
"float32[] action  # single action\n"
"uint8 queue_size  # the size of the queue after fetching\n"
;
  }

  static const char* value(const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fetch_ret);
      stream.next(m.action);
      stream.next(m.queue_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FetchSingleActionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_predict_action::FetchSingleActionResponse_<ContainerAllocator>& v)
  {
    s << indent << "fetch_ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fetch_ret);
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.action[i]);
    }
    s << indent << "queue_size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.queue_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PREDICT_ACTION_MESSAGE_FETCHSINGLEACTIONRESPONSE_H
