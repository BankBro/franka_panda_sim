// Generated by gencpp from file franka_manipulate/MoveitPosCtlResponse.msg
// DO NOT EDIT!


#ifndef FRANKA_MANIPULATE_MESSAGE_MOVEITPOSCTLRESPONSE_H
#define FRANKA_MANIPULATE_MESSAGE_MOVEITPOSCTLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_manipulate
{
template <class ContainerAllocator>
struct MoveitPosCtlResponse_
{
  typedef MoveitPosCtlResponse_<ContainerAllocator> Type;

  MoveitPosCtlResponse_()
    : go_ret(0)  {
    }
  MoveitPosCtlResponse_(const ContainerAllocator& _alloc)
    : go_ret(0)  {
  (void)_alloc;
    }



   typedef uint8_t _go_ret_type;
  _go_ret_type go_ret;





  typedef boost::shared_ptr< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MoveitPosCtlResponse_

typedef ::franka_manipulate::MoveitPosCtlResponse_<std::allocator<void> > MoveitPosCtlResponse;

typedef boost::shared_ptr< ::franka_manipulate::MoveitPosCtlResponse > MoveitPosCtlResponsePtr;
typedef boost::shared_ptr< ::franka_manipulate::MoveitPosCtlResponse const> MoveitPosCtlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator1> & lhs, const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.go_ret == rhs.go_ret;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator1> & lhs, const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_manipulate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bffe99671b6bbecb52085e15cb7124dc";
  }

  static const char* value(const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbffe99671b6bbecbULL;
  static const uint64_t static_value2 = 0x52085e15cb7124dcULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_manipulate/MoveitPosCtlResponse";
  }

  static const char* value(const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# result of action\n"
"uint8 go_ret\n"
;
  }

  static const char* value(const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.go_ret);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveitPosCtlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_manipulate::MoveitPosCtlResponse_<ContainerAllocator>& v)
  {
    s << indent << "go_ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.go_ret);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_MANIPULATE_MESSAGE_MOVEITPOSCTLRESPONSE_H
